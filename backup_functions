#!/bin/bash
check_disk_space () {
	if ! $check_hd_minfree; then return; fi

	# built the command strings to to get percentage of inodes space and inodes
	local pipe="| tail -n1 | sed -e 's/.* \([0-9]\{1,3\}\)%.*/\1/'"
	local kb_used_command="df $bu_path $pipe"
	local inode_used_command="df -i $bu_path $pipe"
	local hd_maxused=$((100-$hd_minfree_percent))

	# get used space
	local hd_kb_used=$(ssh_or_local "$kb_used_command")
	cmd_error $? "check_disk_space" "[ssh -p $ssh_port $to_host] $kb_used_command" "Warning"
	# get used inodes
	local hd_inode_used=$(ssh_or_local "$inode_used_command")
	cmd_error $? "check_disk_space" "[ssh -p $ssh_port $to_host] $inode_used_command" "Warning"
	
	# compare to defined value
	if [[ $hd_kb_used -ge $hd_maxused || $hd_inode_used -ge $hd_maxused ]] ; then
		message "check_disk_space" "Erorr: Not enough space left in $bu_path on $to_host for rsyncing backups!" "FATAL"
	fi
}

remount_bu_disk () {
	# check correct usage
	if [[ $# != 1 ]]; then
		message "remount_bu_disk" "Usage: remount_bu_disk <ro/rw> Call was: remount_bu_disk $@" "FATAL"
	fi
	local remount_state=$1

	# get the mtab entry for the backup device
	local mtab_line=$(ssh_or_local "mount | grep $bu_path")
	cmd_error $? "remount_bu_disk" "[ssh -p $ssh_port $to_host] mount | grep $bu_path" "FATAL"

	# get the current mount state
	local mount_state=$(echo $mtab_line | sed -e 's/.*(\(r[ow]\)).*/\1/')

	# remount rw if necessary
	if [[ $remount_state == 'rw' && $mount_state == 'rw' ]]; then return; fi
	# remount ro if wanted
	if [[ $remount_state == 'ro' && ! $mount_ro ]]; then return; fi

	# get device name
	local bu_device=$(echo $mtab_line | cut -d' ' -f1)
	if [ -z $bu_device ]; then
		message "remount_bu_disk" "Could not determine backup-device on $to_host" "FATAL"
	fi

	# get file system
	local fs_type=$(echo $mtab_line | cut -d' ' -f5)
	if [ -z $fs_type ]; then
		message "remount_bu_disk" "Could not determine filesystem of $bu_device on $to_host" "FATAL"
	fi

	# built remount command
	local remount_command="mount -t $fs_type -o remount,$remount_state $bu_device $bu_path"
	
	#remount
	ssh_or_local "$remount_command"
	cmd_error $? "remount_bu_disk" "[ssh -p $ssh_port $to_host] $remount_command" "FATAL"
}

ssh_or_local () {
	#execute a command locally or remote
	local command=$1
	local retval=''
	local exit_status=''

	if [[ $to_host == $localhost ]] ; then
		#local
		retval=$(eval $command)
		exit_status=$?
	else
		#remote
		retval=$(ssh -p$ssh_port $to_host $command)
		exit_status=$?
	fi
	echo $retval
	return $exit_status
}

cmd_error () {
	write_error "$@" 'cmd'
}

message () {
	write_error -1 "$@" 'msg'
}

write_error () {
	local exit_status=$1
	local caller=$2
	local string=$3
	local level=$4
	local type=$5

	if [[ $exit_status != 0 ]]; then
		if [ -z $caller ]; then
			caller=$0
		else
			caller=$0#$caller
		fi

		if [[ $type == 'cmd' ]]; then 
			echo -e "$level $caller: '$string' exited with status $exit_status"
			logger -t $log_tag "$level $caller: '$string' exited with status $exit_status"
		elif [[ $type == 'msg' ]]; then
			echo -e "$level $caller: $string"
			logger -t $log_tag "$level $caller: $string"
		fi

		if [[ $level == "FATAL" ]]; then 
			exit
		else
			return
		fi
	fi
}


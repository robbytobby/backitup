#!/bin/bash

# load necessary functions
. backitup.functions

# default values
config_file="backitup.cfg"
default_exclude_path=$(dirname $0)
default_verbose=false
default_port=22
default_log_tag="Backup"
default_check_free_space=true
default_minimal_disk_space=10
default_mount_ro=true

# parse options; for the time being, theres only "-f" to specify a custom config file
while getopts ":f:" opt; do
	case $opt in
		f)  config_file=$OPTARG ;;
		\?) echo "Invalid option: -$OPTARG; just ignoring this" ;;
		:)  echo "Option -$OPTARG requires an argument"; exit ;;
	esac
done
# exit if config file does not exist
! [ -f $config_file ] && echo "Could not find the configuration file '$config_file'" && exit

# read config file
i=-1
set_defaults=false
while read line; do
	# remove comments, all leading and trailing white space and whitespace around '='
	line=$(echo $line | sed -e 's/#.*$//;s/^ *//g;s/ *$//g;s/ *\(=\) */=/g')
	# got to next line if line is empty
	! [ "$line" ] && continue

	# default section?
	if [[ "$line" =~ ^\[\ *default\ *\]$ ]]; then
		set_defaults=true
	# jog definition section?
	elif [[ "$line" =~ ^\[.*\]$ ]]; then
		((i++))
		set_defaults=false
		# remove [] and leading and trailing white space
		job[i]=$(echo $line | sed -e 's/\[ *\([^ ]*\) *\]/\1/')
 	# key value pair ?
	elif [[ "$line" =~ ^.*=.*$ ]]; then
		key="${line%%=*}"
		value="${line##*=}"
		# accept only valid keys
		! check_key $key && continue
		if $set_defaults; then
			declare default_$key="$value"
		else
			declare cfg_$key[i]="$value"
		fi
	fi
done < $config_file

# run all defined jobs
i=0
for name in ${job[@]}; do
	fatal=false
	# wrap the main function in a subshell, so that an "exit" just terminates the subshell not the complete script
	( backup_and_rotate )
	((i++))
done


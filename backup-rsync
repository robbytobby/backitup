#!/bin/bash
#
# tag for log entries in syslog
log_tag="Backup"

# load necessary functions
. backup_functions

message " " "Starting '$0 $(echo $@)' on $(date)" "INFO"

# Usage: backup-rsync <HOST> <TASK> <SCHEDULE>
[ $# != 3 ] && { message " " "Usage '$0 <host> <task> <schedule>' but call was: '$0 $(echo $@)'" "FATAL"; }

# load settings
. backup_definitions

# extra_rsync_opts="--bwlimit=256"
extra_rsync_opts="-n"

# schedule settings
if [[ $3 == 'daily' || $3 == 'weekly' || $3 == 'monthly' || $3 == 'yearly' ]] ; then
	schedule=$3
	bu_dir="$bu_dir/$schedule.0"
else
	message "" "schedule '$3' is not known!!!" "FATAL"
fi

# check for free disk space, remount backup diks rw and create backup directory if necessary
[ $check_minimal_disk_space ] && { check_disk_space; }
remount_bu_disk "rw"
create_backup_directory

# built destination and source string for rsync
if [ $from_host != $localhost ]; then from="$from_host:$from_path"; else from=$from_path; fi
if [ $to_host != $localhost ]; then to="$to_host:$bu_dir"; else to=$bu_dir; fi

# The rsync job
rsync  -avz --numeric-ids --rsh="ssh -p$ssh_port" --delete --delete-excluded   \
        --exclude-from="$excludes" --exclude-from="$global_excludes" $extra_rsync_opts $rsync_opts $from $to

# check exit status: 0 = okay, 24 harmless (e.g. files being changed during run-time)
 ! [ $? = 24 -o $? = 0 ] && { message "" "rsync for '$name $task $schedule' finished with errors!" "CRITICAL"; }

# save backup date
execute_remote_or_local "touch $bu_dir"

# just to be sure
execute_remote_or_local "sync"

# remount backup disk ro
[ $mount_ro ] && { remount_bu_disk "ro"; }

# ready
messeage "" "Finished rsync backup for '$name $task $schedule' at $(date)"


#!/bin/bash
# load necessary functions
. backup_functions

# Usage: backup-rsync <HOST> <TASK> <SCHEDULE [d<NUM>:w<NUM>:m<NUM>:y<NUM>]
message " " "Starting '$0 $(echo $@)' on $(date)" "INFO"

# load settings
. backup_definitions


move_and_safe_timestamp () {
	local from=$1
	local to=$2
	
	if [ -d $from ]; then
		execute_remote_or_local "touch $timestamp -r $from"
		execute_remote_or_local "mv $from $to"
		ssh_error_check $? "move_and_safe_timestamp" "mv $from $to" "FATAL"
		execute_remote_or_local "touch $to -r $timestamp"
	fi
}

# the main rotation
rotate () {
	local schedule=$1
	local bu_base="$bu_dir/$schedule"
	local num=$2

	# delete the oldest snapshot if necessary
	local to_remove="$bu_base.$num"

	execute_remote_or_local "test -d $to_remove"
	if [ $? = 0 ] ; then 
		execute_remote_or_local "rm -rf $to_remove"
		ssh_error_check $? "rotate" "rm $to_remove" "FATAL"
	fi
 
	# shift all other snapshots (increment the name)
	local old=$num
	while (( $old >= 0 )); do
		local new=$[ $old + 1 ]
		move_and_safe_timestamp "$bu_base.$old" "$bu_base.$new"
		let old=$old-1
	done
	
	# shift snapshot to next interval e.g. from daily.7 to weekly.0
	if $monthly && [ $schedule = "yearly" ]; then
		move_and_safe_timestamp "$bu_dir/monthly.$num_monthly" "$bu_dir/$schedule.0"
	elif $weekly && [[ $schedule == "yearly" || $schedule == "monthly" ]]; then 
		move_and_safe_timestamp "$bu_dir/weekly.$num_weekly" "$bu_dir/$schedule.0"
	elif $daily &&  [[ $schedule == "yearly" || $schedule == "monthly" || $schedule == "weekly" ]]; then
		move_and_safe_timestamp "$bu_dir/daily.$num_daily" "$bu_dir/$schedule.0"
	else
	# copy newest snapshot via hardlinks from level-1 to level-0
		local LAST=$bu_dir/$schedule.1
		local TO=$bu_dir/$schedule.0
		if [ -d $LAST ] ; then
			execute_remote_or_local "touch $timestamp -r $LAST"
			execute_remote_or_local "cp -al $LAST $TO"
			ssh_error_check $? "rotate" "cp $LAST $TO" "FATAL"
			execute_remote_or_local "touch $TO -r $timestamp"
		fi
	fi
}

# schedule settings
daily=false
weekly=false
monthly=false
yearly=false
for topic in $(echo $3 | tr ":" "\n"); do
	char=${topic:0:1}
	num=${topic:1}
	case "$char" in
		d)
			daily=true
			num_daily=$num
			;;
		w)
			weekly=true
			num_weekly=$num
			;;
		m)
			monthly=true
			num_monthly=$num
			;;
		y)
			yearly=true
			num_yearly=$num
			;;
		*)
			message "" "Unknown schedule '$char'" "FATAL"
	esac
done

# check for free disk space, remount backup diks rw and create backup directory if necessary
[ $check_minimal_disk_space ] && check_disk_space
remount_bu_disk "rw"
create_backup_directory

# rotate!!!
timestamp="$bu_dir/.timestamp"
# yearly rotation on new years day
if $yearly && [ $(date +%j) == 1 ] ; then rotate "yearly" $num_yearly ; fi
# monthly on the first
if $monthly &&  [ $(date +%d) = 1 ] ; then rotate "monthly" $num_monthly ; fi
# weekly on sundays
if $weekly && [ $(date +%w) = 0 ] ; then rotate "weekly" $num_weekly; fi
# daily
if $daily ; then rotate "daily" $num_daily; fi

# remount disk ro if necessary
[ $mount_ro ] && remount_bu_disk "ro"

# Ready
message " " "Finished '$0 $(echo $@)' on $(date)" "INFO"
